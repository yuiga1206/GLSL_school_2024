


==========================================================================
==========================================================================
==========================================================================
 // ★★ 
 // ★★ 

@@@


全5回



=====================================
24/11/02 テスト配信
=====================================

1時間見過ごし…

ブレイクポイント作って、F8で実行
F10でステップ実行

ブレイクポイントでストップしているときに、
コンソールで変数などを見ると楽。

絵文字を変数の中身などと一緒にconsole.logすると、
見た目が全然違うのでパッと見わかりやすい。









 // ★★ 
 // ★★ 

@@@


=====================================
24/11/09 第1回
=====================================
---【前半：座学】---

頂点の個数＝頂点シェーダが実行される回数

画面の解像度が大きい場合、当然フラグメントシェーダによる
負荷は大きなものになります。


何が起こっていて、それによって何が出来るようになって、何のためにそれをするのか……
という流れを把握しておくこと。




「これは、「attribute のマッピングがよくあるミスで、それを防ぐためにライブラリ化した」という感じなのでしょうか?」
→　そうですね。その理由もあるが、
script.js に記述するにはコード量が多いので、
ライブラリの方にまとめたい…という理由の方が大きい。


修飾子は暗記すること！！
↓
attribute は、頂点それぞれが固有に持つ情報を格納
uniform はアプリケーション(CPU = js)から送られてくるグローバルな情報
varying は頂点シェーダからフラグメントシェーダへの橋渡しをする



頂点の情報を詰め込んだバッファのことを VBO（Vertex BufferObject） と呼びます。



「gl_PointSize = 16.0 とした場合、16ピクセル四方（16ピクセル×16ピクセル）の大きさを持つ点になる、ということであっていますか？」
→　合っている。








---【後半：実習】---

---【001】---





---【002】---

毎フレームVBOを作り直す…という処理は重いので、
uniform 変数を使って、サイズを乗算する。






---【003】---







---【004】---

スクリーン空間のピクセルの範囲では無く、
全体を -1 ~ 1 の世界と見なしたときの大きさで考える。


「viewportの際に座標の中心が左下と聞いたので、頂点座標も正規化が必要なのかなと考えましたが、そちらは画面中心なんですね。」
→　そうです！
viewport は左下が原点だが、
シェーダの中の世界は -1 ~ 1 の範囲に限定された世界になっている。





---【005】---

自分で読み解く！！



チートシート：webgl-reference-card
https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf

より詳しい仕様：The OpenGL ES Shading Language
https://www.khronos.org/files/opengles_shading_language.pdf





---【まとめ】---

ちょっとしたことでも良いので、自分で書いてみる！
背伸びしなくて良い。
サンプルをちょっとだけ変えてみるとか。

手を動かさないと絶対覚えない…！
やることが一番の近道！




課題：

今回は、まず頂点の個数を単純にどんどん増やしてみましょう。
今はまだ奥行きのある状態を扱っていないので、ひとまず XY 平面上に
大量に配置してみましょう。（数千～数万程度）規則正しく並べてみて
もいいですし、ランダムに配置してみても面白いかもしれません。マウ
スとのインタラクションなども実装できたらなお良いでしょう。





------------------
【講義後の質問】
------------------


