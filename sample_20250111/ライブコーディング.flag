precision highp float;
out vec4 outColor;
uniform float time;
uniform vec2 resolution;
uniform sampler2D backbuffer;
uniform vec2 mouse;
uniform float midi[128];
#define rep(i,n) for(int i=0;i<n;i++)
#define sat(x) clamp(x,.0,1.)
#define norm(x) normalize(x)
#define sc(x) hash(vec3(bt,1.23,x))

float lt,tr;
int bt,si;
void set(float t)
{
  lt=t;tr=fract(t);bt=int(t);
}
const float pi = acos(-1.);
const float tau = 2. * pi;
vec3 hash(vec3 x)
{
  uvec3 v=floatBitsToUint(x)+uvec3(1,2,3);
  v=((v>>8u)^v.yzx)*0xf928a823u;v=((v>>8u)^v.yzx)*0xf928a823u;v=((v>>8u)^v.yzx)*0xf928a823u;
  return vec3(v)/vec3(-1u);
}
mat3 bnt(vec3 t)
{
  vec3 b,n=vec3(0,1,0);t=norm(t);b=norm(cross(n,t));n=norm(cross(t,b));
  return mat3(b,n,t);
}
vec3 cyc(vec3 x,float q)
{
  mat3 m=bnt(norm(vec3(1,2,3)));
  vec4 v;
  rep(i,5)
  {
    x+=sin(x.yzx);
    v=q*v+vec4(cross(cos(x),sin(x.zxy)),1);
    x*=q*m;
  }
  return v.xyz/v.w;
}
mat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}
float sspk(vec2 p){return (abs(p.x*p.y)-.1)/(length(p)+1e-4);}
float spk(vec2 p){return step(sspk(p),.0);}

float sdf(vec3 p)
{
  float s=2.;
  p.z=mod(p.z+s*.5,s)-s*.5;
  float a=fract(atan(p.y,p.x)/pi+.5)-.5;
  p.xy=vec2(a*4.,length(p.xy)-3.);
  float d=max(max(sspk(p.xy),sspk(p.yz)),sspk(p.zx));
  return d;
}
vec3 spi(vec2 suv)
{
  vec3 rp,ro,rd,dir;
  float d,z,l=.0;
  z=tr;
  ro=vec3(0,0,lt*8.);
  dir=vec3(0,0,1);
  if(si==3)
  {
    z-=length(suv)*tr;
    vec3 s=(hash(vec3(1,2,bt))-.5)*20.*tr;
    ro+=s;
    dir=norm(-s);
  }
  else if(si==4)
  {
    z-=length(suv)*tr;
    vec3 s=vec3(0,10,.1)*tr;
    ro+=s;
    dir=norm(-s);
  }
  else if(si==5)
  {
    z-=length(suv)*tr;
    ro=vec3(0,10,0)*tr;
    dir=vec3(0,-1,1e-4);
  }
  rd=bnt(dir)*norm(vec3(suv,z));
  vec3 c=vec3(0);
  int n=66;
  float fn=float(n);
  rep(i,n)
  {
    rp=rd*l+ro;
    if(si==4)
    {
      rp.xy*=rot(rp.z*.1);
    }
    else if(si==5)
    {
      rp.xz=vec2(length(rp.xz)-8.,atan(rp.z,rp.x)/pi*16.+lt*4.);
    }
    l+=d=abs(sdf(rp))+.001;
    c+=exp(-d*2.)*(1.+cos(vec3(0,1,2)+pi+d*l*pi));
  }
  c=sat(c/fn);
  c=smoothstep(.0,1.,c*1.2);
  return c;
}

void main()
{
  set(time*175./120.*mix(1.,2.,step(.1,midi[49])));
  bool tika=.1<midi[50];
  if(tika)
  {
    set(lt*16.);lt=float(bt);tr=1.;
  }
  vec2 fc = gl_FragCoord.xy,res = resolution.xy,asp = res / min(res.x,res.y),asp2 = res / max(res.x,res.y);
  vec2 uv = fc / res,suv = (uv * 2. - 1.) * asp;
  vec3 c = vec3(0);
  
  float pw=3.;
  tr=tanh((bt%2==0?tr:1.-tr)*pw)/tanh(pw);
  bt/=2;
  si=bt%7;
  
  if(sc(1).x<.1)
  {
    suv=fract(suv)*4.-2.;
  }
  vec3 ro=vec3(0,0,lt)+cyc(vec3(lt*.5),1.2);
  float r=.5;
  suv-=ro.xy;
  
  float u=atan(suv.y,suv.x)/pi,z=r/length(suv)+ro.z;
  vec2 xy=norm(suv)*r;
  vec3 rp=vec3(xy,z);
  vec2 puv=vec2(u,z)*4.;puv=mod(puv+1.,2.)-1.;
  
  //si=6;
  vec3 b;float m;
  if(si==0)
  {
    b=vec3(1)*spk(puv)*exp(-length(rp-ro)*.1);
    m=spk(suv*4.*tr*rot(tr*tau+2.4));
  }
  else if(si==1)
  {
    b=vec3(0);
    m=spk(suv*4.*tr*rot(rp.z*pi));
  }
  else if(si==2)
  {
    b=spi(suv);
    m=spk(suv*4.*tr*rot(tr*tau+2.4));
  }
  else if(si==3)
  {
    b=spi(suv);
    m=step(tr*.8,abs(suv.y))+step(min(abs(suv).x,abs(suv).y),.002);
  }
  else if(si==4)
  {
    b=spi(suv);
    m=step(tr*.8,abs(suv.x))+step(min(abs(suv).x,abs(suv).y),.002);
  }
  else if(si==5)
  {
    b=spi(suv);
    m=spk(suv*4.*tr*rot(rp.z*pi));
  }
  else if(si==6)
  {
    b=vec3(0);
    m=step(fract(cyc(vec3(abs(suv*2.),lt),1.5).x*2.),.5);
  }
  
  c=mix(b,mix(vec3(0,0,1),vec3(1,0,0),float(bt/7%2)),m);
  if(.75<fract(lt*.5))
  {
    c=vec3(step(.7,1.-sat(dot(c,vec3(.34)))));
  }
  
  if(tika)
  {
    c=mix(step(.5,c.zzz),vec3(0,0,1),spk(suv*2.+cyc(vec3(suv,lt),2.).xy));
    c=mix(c,1.-c,float(bt%2));
  }
  
  c=mix(c,vec3(c.b,texture(backbuffer,uv).rg),min(.95,midi[48]));
  c=mix(c,texture(backbuffer,uv).rgb,min(.95,midi[48]));

  outColor = vec4(c,1);
}